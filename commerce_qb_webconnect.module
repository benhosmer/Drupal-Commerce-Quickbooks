<?php

// status codes
define('commerce_qb_webconnect_QB_PENDING', 1);
define('commerce_qb_webconnect_QB_DONE', 0);

// tax type
// @TODO move this out of here
define('commerce_qb_webconnect_QB_MI_TAX', 'MI Sales Tax');
define('commerce_qb_webconnect_QB_ZERO_TAX', 'Local Tax');

/*
 * Implements hook_hook_info().
 */
function commerce_qb_webconnect_hook_info() {
  $hooks = array(
    'commerce_qb_line_item_products_alter' => array(
      'group' => 'commerce',
    ),
  );
  
  return $hooks;
}

/*
 * Implements hook_permission()
 */
function commerce_qb_webconnect_permission(){
  return array(
    'access quickbooks SOAP' => array(
      'title' => t('Access Quickbooks SOAP'),
      'description' => t('Authenticate with Quickbooks resources through SOAP endpoints.'),
    ),
    'administer qb webconnect' => array(
      'title' => t('Administer Commerce QB Webconnect'),
      'description' => t('Change config and logging settings for Commerce QB Webconnect.'),
    ),      
  );
}

/*
 * Implements hook_services_resources()
 */
function commerce_qb_webconnect_services_resources() {

  // Due to a peculiarity of the services module + qbwc wsdl, the request always comes in as a stdClass object
  $request_args = array(
                    array(
                      'name' => 'request',
                      'type' => 'struct',
                      'description' => 'standard request object',
                      'source' => array('param'),
                      'optional' => FALSE,
                    ),
                  );

  return array(
    'commerce_qb_webconnect' => array(
      'actions' => array(
        'serverVersion' => array(
          'help' => 'Send the server version to client',
          'callback' => 'commerce_qb_webconnect_qb_serverVersion',
          'access arguments' => array('access content'),
          'args' => $request_args
        ),
        'clientVersion' => array(
          'help' => 'Check client version',
          'callback' => 'commerce_qb_webconnect_qb_clientVersion',
          'access arguments' => array('access content'),
          'args' => $request_args
        ),
        'authenticate' => array(
          'help' => 'Authenticate and initiate session with client',
          'callback' => 'commerce_qb_webconnect_qb_authenticate',
          'access arguments' => array('access content'),
          'args' => $request_args
        ),
        'sendRequestXML' => array(
          'help' => 'Send data back to client',
          'callback' => 'commerce_qb_webconnect_qb_sendRequestXML',
          'access arguments' => array('access content'),
          'args' => $request_args
        ),
        'receiveResponseXML' => array(
          'help' => 'Get response from last quickbooks operation',
          'callback' => 'commerce_qb_webconnect_qb_receiveResponseXML',
          'access arguments' => array('access content'),
          'args' => $request_args
        ),
        'getLastError' => array(
          'help' => 'Quickbooks error handler',
          'callback' => 'commerce_qb_webconnect_qb_getLastError',
          'access arguments' => array('access content'),
          'args' => $request_args
        ),
         'closeConnection' => array(
          'help' => 'Close the connection',
          'callback' => 'commerce_qb_webconnect_qb_closeConnection',
          'access arguments' => array('access content'),
          'args' => $request_args
        ),
      ),
    ),
  );
}

/*
 * Implements hook_menu().
 */
function commerce_qb_webconnect_menu(){
  $items['admin/config/commerce_qb_webconnect'] = array(
    'title' => t('Commerce QB Webconnect settings'),
    'description' => t('Settings for Commerce QB Webconnect.'),
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer qb webconnect'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'position' => 'right',
    'weight' => -5,
  );  
  
  $items['admin/config/commerce_qb_webconnect/settings'] = array(
    'title' => t('Commerce QB Webconnect settings'),
    'description' => t('Logging and configuration settings for Commerce QB Webconnect.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_qb_webconnect_admin_form'),
    'access arguments' => array('administer qb webconnect'),
  );

  return $items;
}

function commerce_qb_webconnect_admin_form(){
  $form['commerce_qb_webconnect_enable_logging'] = array(
    '#title' => t('Enable logging'),
    '#description' => t('Write QB Webconnect update details to log file'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('commerce_qb_webconnect_enable_logging', 0)
  );
  
  $form['commerce_qb_webconnect_truncate_log'] = array(
    '#title' => t('Truncate log before update'),
    '#description' => t('If set, each update run will overwrite the last one recorded in the log.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('commerce_qb_webconnect_truncate_log', 0)
  );  
    
  $scheme = variable_get('file_default_scheme', 'public');
  $path = variable_get('file_' . $scheme . '_path', '');
  
  $form['commerce_qb_webconnect_log_filepath'] = array(
      '#title' => t('Path to log file'),
    '#description' => t('Must be writeable by webserver'),
    '#type' => 'textfield',
    '#default_value' => variable_get('commerce_qb_webconnect_log_filepath', $path . '/commerce_qb_webconnect'),
  );
  
  $form['update_exports'] = array(
    '#type' => 'submit',
    '#value' => t('Update exports table'),
    '#suffix' => '<div ' . drupal_attributes(array('class' => array('description'))) . '>' . t('Populate exports table with new orders, products and customers.') . '</div>',
  );
  
  $form['#submit'][] = 'commerce_qb_webconnect_admin_form_submit';
  
  return system_settings_form($form);
}

/*
 * Validation handler for admin form
 */
function commerce_qb_webconnect_admin_form_validate(&$form, &$form_state){
  $path = $form_state['values']['commerce_qb_webconnect_log_filepath'];
  
  if (!is_writable($path) && !mkdir($path)){
    form_set_error('commerce_qb_webconnect_log_filepath', t('File path ' . $path . 'is not writeable'));
  }
}

/*
 * Submit handler for admin form
 */
function commerce_qb_webconnect_admin_form_submit(&$form, &$form_state){
  $entities = array(
    'commerce_order' => entity_load('commerce_order'),
    'commerce_customer_profile' => entity_load('commerce_customer_profile'),
    'commerce_product' => entity_load('commerce_product'),
  );
  
  foreach ($entities as $type => $type_entity_list){
    foreach ($type_entity_list as $type_entity){
      $operations[] = array('commerce_qb_webconnect_qb_export_batch_save', array($type_entity, $type));
    }
  }
  
  $batch = array(
    'operations' => $operations,
    'finished' => 'commerce_qb_webconnect_batch_export_update_finished'
  );
  
  batch_set($batch);
}

/*
 * Finished callback for update exports table action
 */
function commerce_qb_webconnect_batch_export_update_finished($success, $results, $operations){
  $count = count($results);
  $msg = $count > 0 ? t($count . ' export records added.') : t('Export table already up to date.');
  
  drupal_set_message('Batch update finished. ' . $msg);
}

/*
 * Implements hook_soap_server_wsdl()
 */
function commerce_qb_webconnect_soap_server_wsdl($endpoint){  
  if ($endpoint->name == 'SOAP'){
    return array(
      file_get_contents('http://developer.intuit.com/uploadedFiles/Support/QBWebConnectorSvc.wsdl')
    );
  }
}

/*
 * Implements hook_entity_info()
 */

function commerce_qb_webconnect_entity_info() {
  return array(
    'commerce_qb_webconnect_qb_export' => array(
      'label' => t('Quickbooks export item'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'commerce_qb_exports',
      'entity keys' => array(
        'id' => 'id',
        'label' => 'item_type'
      ),
    ),
  );
}

/*
 * Implements hook_entity_insert()
 */
function commerce_qb_webconnect_entity_insert($entity, $type){  
  switch ($type){
    case 'commerce_order':
    case 'commerce_product':
    case 'commerce_payment_transaction':
    case 'commerce_line_item':
    case 'commerce_customer_profile':
      $id = null;
      
      // products have to be accessed through their line item
      if ($type == 'commerce_line_item' && $entity->type == 'product'){
        $type = 'commerce_product';
        $id = $entity->commerce_product['und'][0]['product_id'];
      }

      // orders have to be accessed via payment transaction
      if ($type == 'commerce_payment_transaction'){
        $type = 'commerce_order';
        $id = $entity->order_id;
      }
      
      if (!$id){
        $id = entity_id($type, $entity);
      }

      $qb_update = array(
        'item_id' => $id,
        'item_type' => $type,
        'status_code' => 1
      );
      
      // check for duplicates and write to table
      commerce_qb_webconnect_qb_export_write((object)$qb_update);
      
      break;
  }
}

/*
 * Implements hook_entity_delete()
 */
function commerce_qb_webconnect_entity_delete($entity, $type){
  
}

/**
 * Entity type neutral wrapper for commerce_qb_webconnect_qb_export_write()
 * 
 * @param Entity $entity
 *  Entity for which to save a QB export
 * 
 * @param string $type 
 *  Entity type
 */
function commerce_qb_webconnect_qb_export_save($entity, $type){
  $id = null;

  // products have to be accessed through their line item
  if ($type == 'commerce_line_item' && $entity->type == 'product'){
    $type = 'commerce_product';
    $id = $entity->commerce_product['und'][0]['product_id'];
  }

  // orders have to be accessed via payment transaction
  if ($type == 'commerce_payment_transaction'){
    $type = 'commerce_order';
    $id = $entity->order_id;
  }

  if (!$id){
    $id = entity_id($type, $entity);
  }

  $qb_update = array(
    'item_id' => $id,
    'item_type' => $type,
    'status_code' => 1
  );

  // check for duplicates and write to table
  $export = commerce_qb_webconnect_qb_export_write((object)$qb_update);
  
  if ($export){
    return $export;
  }
}

function commerce_qb_webconnect_qb_export_batch_save($entity, $type, &$context){
  $export = commerce_qb_webconnect_qb_export_save($entity, $type);
  
  if($export){
    $context['results'][] = $export;
  }
}

/*
 * Quickbooks RPC callbacks
 *
 * See http://developer.intuit.com/qbsdk-current/doc/pdf/qbwc_proguide.pdf
 *
 * The argument format for these functions is different than the examples shown in the
 * manual above. 
 *
 * The key convention to follow is that you return a stdClass object with one property
 * named [quickbooks method name]Result that contains an array/string formatted like the
 * QBWC specs say. This seems to be the only way to send back responses that QBWC can
 * interpret.
 *
 * Right now this module depends on a hacked version of soap server. Patch will be made soon
 * and contributed.
 */

/*
 * Return the server version to the client. Runs pre-authentication.
 */
function commerce_qb_webconnect_qb_serverVersion($request){
  cqbc_log_block_start();
  cqbc_log_write('Method: [serverVersion] called');
  $return->serverVersionResult = '1.0';
  return $return;
}

/*
 * Authenticate client. Unique token is a drupal session id. Uses standard drupal
 * authentication procedure.
 */
function commerce_qb_webconnect_qb_authenticate($request){
  cqbc_log_write('Method: [authenticate] called');
  $strUserName = $request->strUserName;
  $strPassword = $request->strPassword;

  $path = drupal_get_path('module', 'services');
  require_once $path . '/resources/user_resource.inc';

  $login = _user_resource_login($strUserName, $strPassword);

  if ($login->sessid){
    $retVal = array($login->sessid, '');
    cqbc_log_write('User ' . $strUserName . ' authenticated');
  } else {
    $retVal = array(session_id(), 'nvu');
    cqbc_log_write('User ' . $strUserName . ' failed to authenticate');
  }

  $return->authenticateResult = $retVal;
  return $return;
}

/*
 * Return the client version to the server. Runs pre-authentication.
 */
function commerce_qb_webconnect_qb_clientVersion($request){
  $strVersion = $request->strVersion;
  cqbc_log_write('Method: [clientVersion] called');

  $return->clientVersionResult = '';
  return $return;
}

/*
 * Sends a procedure request back to the server using QBXML. Requires authentication.
 *
 * See http://developer.intuit.com/qbSDK-current/OSR/OnscreenRef/index-QBD.html (must use ie).
 */
function commerce_qb_webconnect_qb_sendRequestXML($request){
  $sid = $request->ticket;
  cqbc_log_write('Method: [sendRequestXML] called');
  
  if (!commerce_qb_webconnect_check_session($sid)){
    return false;
  }

  cqbc_log_write('Searching for next export ...');
  $item = commerce_qb_webconnect_get_next_export();

  if ($item){
    cqbc_log_write("Export found");

    // send to xml render procedure
    cqbc_log_write('Rendering qbxml ...');
    $qbxml = commerce_qb_webconnect_render_qbxml($item);
    cqbc_log_write('qbxml rendered successfully');

    if ($qbxml){
      $value = $qbxml;
    }
  } else {
    cqbc_log_write('No export found, jobs finished');
    $value = '';
  }

  $return->sendRequestXMLResult = $value;
  return $return;
}

/*
 * Request containing information about last procedure initiated by sendRequestXML. Requires
 * authentication.
 */
function commerce_qb_webconnect_qb_receiveResponseXML($request){
  $sid = $request->ticket;
  cqbc_log_write('Method: [receiveResponseXML called');
  
  if (!commerce_qb_webconnect_check_session($sid)){
    return false;
  }
  
  //cqbc_log_write('Request:', $request);

  //find out which item the response pertains to
  $item = commerce_qb_webconnect_get_next_export();

  if ($item){
    $qb_export = commerce_qb_webconnect_next_in_queue($item->entity_type);
    commerce_qb_webconnect_qb_export_complete($qb_export);
  }
  
  return $return;
}

/*
 * Called if sendRequestXML or receiveResponseXML returns an error code. Requires authentication. 
 * This function seems to actually get called at the end of every request cycle.
 */
function commerce_qb_webconnect_qb_getLastError($request){
  cqbc_log_write('Method: [getLastError] called');
  $sid = $request->ticket;

  if (!commerce_qb_webconnect_check_session($sid)){
    return false;
  }

  $remaining = commerce_qb_webconnect_qb_exports_pending();

  if ($remaining < 1){
    $return->getLastErrorResult = 'No jobs remaining';
  }
  
  return $return;
}

/*
 * Close the connection to the QBWC client.
 */
function commerce_qb_webconnect_qb_closeConnection($request){
  cqbc_log_write('Method: [closeConnection] called');
  $sid = $request->ticket;

  if (!commerce_qb_webconnect_check_session($sid)){
    cqbc_log_block_end();
    return false;
  }

  // allow connection to close
  $return->closeConnectionResult = 'OK';
  cqbc_log_block_end();
  return $return;
}

/* Helper functions */

/**
 * Determine whether or not session is valid and user has access quickbooks SOAP permission
 *
 * @global object $user
 *  user object
 *
 * @param string $sid
 *  session token
 *
 * @return boolean
 */
function commerce_qb_webconnect_check_session($sid){
  global $user;
  
  // load the session
  _drupal_session_read($sid);

  if (user_access('access quickbooks SOAP', $user)){
    return true;
  }
  
  cqbc_log_write('User session invalid');
}


/**
 * Wraps string in qbxml starting and ending tags
 *
 * @param string $qbxml
 * xml to wrap
 *
 * @return string
 * wrapped output
 */
function commerce_qb_webconnect_wrap_qbxml($qbxml){
  $output = '<?xml version="1.0" encoding="utf-8"?>
            <?qbxml version="7.0"?>
            <QBXML>
            <QBXMLMsgsRq onError="stopOnError">' . $qbxml .
            '</QBXMLMsgsRq>
            </QBXML>';

  return $output;
}

/**
 * Finds next qb export item to be processed. Since Quickbooks requires that customers
 * exist before adding references to them in invoices, this function has to make sure
 * that all pending customers have been imported before importing invoices.
 *
 * @return object
 * qb export entity
 */
function commerce_qb_webconnect_get_next_export(){

  // set priority order for types
  $priority_types = array(
    'commerce_customer_profile',
    'commerce_product',
    'commerce_order'
  );

  // loop through types in priority order
  foreach ($priority_types as $type){

    // find the qb export entity
    $qb_export = commerce_qb_webconnect_next_in_queue($type);

    if ($qb_export){
      $entity = entity_load($type, array($qb_export->item_id));
      $entity = commerce_qb_webconnect_entity_list_flatten($entity, $type);

      // return the full commerce entity
      return $entity;
    }
  }
}

/**
 * Finds either next item in queue, or next item of specified type in queue
 *
 * @param string $type
 * value found in item_type column, or null for all records pending
 *
 * @return array
 *
 */
function commerce_qb_webconnect_next_in_queue($type = null){

  // set entity type
  $items_query = new EntityFieldQuery;
  $items_query->entityCondition('entity_type', 'commerce_qb_webconnect_qb_export', '=')
              ->propertyCondition('status_code', commerce_qb_webconnect_QB_PENDING, '=')
              ->range(null, 1);

  if ($type){
    $items_query->propertyCondition('item_type', $type, '=');
  }

  // run query
  $items = $items_query->execute();
  
  if ($items){
    $keys = array_keys($items['commerce_qb_webconnect_qb_export']);
    $id = $keys[0];

    // load full entity referenced
    $entity = entity_load('commerce_qb_webconnect_qb_export', array($id));
    return $entity[$id];
  }
}

/**
 * Switch renders qbxml to send back to QBWC client. Processes one item at a time.
 * Order of XML nodes does matter, see http://www.consolibyte.com/wiki/doku.php/quickbooks_example_qbxml
 * 
 * @param object $entity
 * entity object of item being rendered
 *
 * @return string $qbxml
 */
function commerce_qb_webconnect_render_qbxml($entity){
  $qbxml = '';
  
  switch ($entity->entity_type){
    case 'commerce_customer_profile':
      $customer = $entity->commerce_customer_address['und'][0];
      
      $qbxml .= "
        <CustomerAddRq>
          <CustomerAdd>
            <Name>" . $customer["name_line"] . "</Name>
            <CompanyName>" . $customer["organisation_name"] . "</CompanyName>
            <FirstName>" . $customer["first_name"] . "</FirstName>
            <LastName> " . $customer["last_name"] . "</LastName>
            <BillAddress>
              <Addr1>" . $customer["premise"] . "</Addr1>
              <Addr2>" . $customer["sub_premise"] . "</Addr2>
              <Addr3>" . $customer["thoroughfare"] . "</Addr3>
              <City>" . $customer["locality"] . "</City>
              <State>" . $customer["administrative_area"] . "</State>
              <PostalCode>" . $customer["postal_code"] . "</PostalCode>
              <Country>" . $customer["country"] . "</Country>
            </BillAddress>
            <Phone>" . $entity->field_phone["und"][0]["value"] . "</Phone>
            <Email>" . $entity->field_email["und"][0]["value"] . "</Email>
            <Contact>" . $customer["name_line"] . "</Contact>
          </CustomerAdd>
        </CustomerAddRq>\n";
      
      //cqbc_log_write('customer qbxml', $qbxml);

      break;
    case 'commerce_product':
      $qbxml .= '
        <ItemInventoryAddRq requestID="p' . $entity->product_id . '">
          <ItemInventoryAdd>
            <Name>' . $entity->sku . '</Name>
            <SalesDesc>' . $entity->title . '</SalesDesc>
            <SalesPrice>' . $entity->commerce_price['und'][0]['amount'] . '</SalesPrice>
            <IncomeAccountRef>
              <FullName>Sales</FullName>
            </IncomeAccountRef>
            <COGSAccountRef>
              <FullName>Inventory Cost</FullName>
            </COGSAccountRef>
            <AssetAccountRef>
              <FullName>Inventory Asset</FullName>
            </AssetAccountRef>
          </ItemInventoryAdd>
        </ItemInventoryAddRq>';

      break;
    case 'commerce_order':
      $tax = '';

      // load customer profile
      $profile_id = $entity->commerce_customer_billing['und'][0]['profile_id'];
      $profile = commerce_customer_profile_load($profile_id);
      $profile_info = $profile->commerce_customer_address['und'][0];

      // add tax if billing address is in Michigan
      // @TODO move this out of here
      $tax = ($profile_info['administrative_area'] == 'MI') ? commerce_qb_webconnect_QB_MI_TAX : commerce_qb_webconnect_QB_ZERO_TAX;

      // load products
      $products = commerce_qb_webconnect_line_item_products($entity);
      
      // allow modules to alter the list of products being exported with this order
      drupal_alter('commerce_qb_webconnect_order_products', $products, $entity);

      if (!empty($products)){
        $products_qbxml = '';
        
        foreach ($products as $product){
          $amount = $product->commerce_price['und'][0]['amount'];          
          $price = commerce_currency_format($amount, commerce_default_currency());
          
          // remove currency sign
          $price = substr($price, 1);

          $products_qbxml .= '
            <InvoiceLineAdd>
              <ItemRef>
                <FullName>' . $product->sku . '</FullName>
              </ItemRef>
              <Desc>' . $product->title . '</Desc>
              <Quantity>' . $product->quantity . '</Quantity>
              <Rate>' . $price . '</Rate>
            </InvoiceLineAdd>';
        }
      }

      $qbxml .= '
        <InvoiceAddRq>
          <InvoiceAdd>
            <CustomerRef>
              <FullName>' . $profile_info['name_line'] . '</FullName>
            </CustomerRef>
            <TxnDate>' . format_date($entity->created, 'custom', 'Y-m-d') . '</TxnDate>
            <RefNumber>' . $entity->order_id . '</RefNumber>
            <BillAddress>
              <Addr1>' . $profile_info['premise'] . '</Addr1>
              <Addr2>' . $profile_info['sub_premise'] . '</Addr2>
              <Addr3>' . $profile_info['thoroughfare'] . '</Addr3>
              <City>' . $profile_info['locality'] . '</City>
              <State>' . $profile_info['administrative_area'] . '</State>
              <PostalCode>' . $profile_info['postal_code'] . '</PostalCode>
              <Country>' . $profile_info['country'] . '</Country>
            </BillAddress>
            <ShipAddress>
              <Addr1>' . $profile_info['premise'] . '</Addr1>
              <Addr2>' . $profile_info['sub_premise'] . '</Addr2>
              <Addr3>' . $profile_info['thoroughfare'] . '</Addr3>
              <City>' . $profile_info['locality'] . '</City>
              <State>' . $profile_info['administrative_area'] . '</State>
              <PostalCode>' . $profile_info['postal_code'] . '</PostalCode>
              <Country>' . $profile_info['country'] . '</Country>
            </ShipAddress>
            <ItemSalesTaxRef>
            <FullName>' . $tax . '</FullName>
            </ItemSalesTaxRef>' .
            $products_qbxml .
          '</InvoiceAdd>
        </InvoiceAddRq>';
      
      cqbc_log_write('order qbxml', $qbxml);
      
      break;
  }

  $qbxml = commerce_qb_webconnect_wrap_qbxml($qbxml);
  return $qbxml;
}

/**
 * Given a list of entities, returns the first entity
 *
 * @param array $list
 * array of entities, as returned from entity_load
 *
 * @param string $type
 * entity type
 *
 * @return object
 * entity
 */
function commerce_qb_webconnect_entity_list_flatten($list, $type){
  $keys = array_keys($list);
  $id = $keys[0];

  // load full entity
  $entity = entity_load($type, array($id));

  // add the entity type property
  $entity[$id]->entity_type = $type;
  return $entity[$id];
}

/**
 * Check for uniqueness, and then write one qb export entity
 *
 * @param object $export
 * export entity presave object
 * 
 * @return boolean
 * true if no duplicate found
 */
function commerce_qb_webconnect_qb_export_write($export){
  
  // check for uniqueness
  $items_query = new EntityFieldQuery;
  $items_query->entityCondition('entity_type', 'commerce_qb_webconnect_qb_export', '=')
              ->propertyCondition('item_type', $export->item_type, '=')
              ->propertyCondition('item_id', $export->item_id, '=')
              ->count();

  $count = $items_query->execute();

  if ($count < 1){

    // write a new record
    $entity = entity_save('commerce_qb_webconnect_qb_export', $export);
    return $entity;
  }
}

function commerce_qb_webconnect_qb_exports_pending(){
  $items_query = new EntityFieldQuery;
  $items_query->entityCondition('entity_type', 'commerce_qb_webconnect_qb_export', '=')
              ->propertyCondition('status_code', commerce_qb_webconnect_QB_PENDING, '=')
              ->count();

  $count = $items_query->execute();

  if (is_numeric($count)){
    return $count;
  }
}

/**
 * Set a quickbooks export entity status code to done
 *
 * @param object $export
 * qb export entity
 */
function commerce_qb_webconnect_qb_export_complete($export){
  $export->status_code = commerce_qb_webconnect_QB_DONE;

  // save the entity
  entity_save('commerce_qb_webconnect_qb_export', $export);
}

/**
 * Get all line item products associated with an order entity
 *
 * @param object $order
 * order entity with line items
 * 
 * @return array
 * list of products, each given an extra quantity field normally associated with the line item
 */
function commerce_qb_webconnect_line_item_products($order, $array_key = 'product_id'){
  $line_items = $order->commerce_line_items['und'];
  $products = array();

  if ($line_items){
    foreach ($line_items as $line_item){
      $line_item_id = $line_item['line_item_id'];
      $line_item_entity = commerce_line_item_load($line_item_id);

      if ($line_item_entity->type == 'product'){
        $product_id = $line_item_entity->commerce_product['und'][0]['product_id'];
        $product = commerce_product_load($product_id);

        if ($product){

          // either use product_id or line_item_id as a key
          $key = ($array_key == 'product_id') ? $product_id : $line_item_id;
          $products[$key] = $product;
          
          // insert quantity
          $products[$key]->quantity = $line_item_entity->quantity;
        }
      }
    }
  }

  return $products;
}

/**
 * Write a line to the qbclog
 * 
 * @param string $msg
 *  The message to log
 * 
 * @param type $variable
 *  A variable to print
 * 
 * @param type $indent 
 *  Whether or not to indent
 */
function cqbc_log_write($msg, $variable = null, $indent = true){
  if (!variable_get('commerce_qb_webconnect_enable_logging', 0)){
    return;
  }
  
  $handle = _cqbc_log_open();
  $margin = $indent ? '  * ' : '';
  
  // double quotes are needed
  $string = $margin . $msg . "\n";
  
  if ($variable){
    $dump = '';
    
    if (is_array($variable) || is_object($variable)){
      cqbc_dump_to_string($variable, $dump);
    } else {
      $dump = $variable;
    }
    
    $string .= $dump . "\n";
  }
  
  fwrite($handle, $string);
  fclose($handle);
}

/**
 * Open a handler for the qbclog file
 * 
 * @param string $mode
 *  Mode argument for fopen
 * 
 * @return file resource
 */
function _cqbc_log_open($mode = 'a'){
  $path = variable_get('commerce_qb_webconnect_log_filepath', '');
  $logpath = $path . '/qbclog.txt';  
  
  if (!is_file($logpath) && !touch($logpath)){        
    watchdog('QB Webconnect', t('Could not create Commerce QB Connect log file.'));
    return;
  }
  
  $handle = fopen($logpath, $mode);
  return $handle;
}

/*
 * Print a block opening for an update run
 */
function cqbc_log_block_start(){
  if (variable_get('commerce_qb_webconnect_truncate_log', 0)){
    
    // truncate log
    $handle = _cqbc_log_open('w');
    fclose($handle);
  }
  
  cqbc_log_write('-- Start update: ' . date('Y-m-d G:i:s') . ' --', null, false);
}

/*
 * Print a block closure for an update run
 */
function cqbc_log_block_end(){
  cqbc_log_write("-- End update: " . date('Y-m-d G:i:s') . " --\n", null, false);
}

/**
 * Given a variable, render it recursively in readable plaintext.
 * Via http://php.net/manual/en/function.var-dump.php :: flyfy1
 * 
 * @param mixed $var
 *  Variable to dump
 * 
 * @param $output
 *  Referenced container variable
 * 
 * @return string 
 */
function cqbc_dump_to_string($var,&$output,$prefix=""){
  foreach($var as $key=>$value){
    if(is_array($value)){
        $output.= '  ' . $prefix.$key.": \n";
        cqbc_dump_to_string($value,$output,"  ".$prefix);
    } else{
        $output.= '  ' . $prefix.$key.": ".$value."\n";
    }
  }
}